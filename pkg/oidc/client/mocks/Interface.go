// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/int128/kubelogin/pkg/oidc/client"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	oauth2dev "github.com/int128/oauth2dev"

	oidc "github.com/int128/kubelogin/pkg/oidc"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// ExchangeAuthCode provides a mock function with given fields: ctx, in
func (_m *Interface) ExchangeAuthCode(ctx context.Context, in client.ExchangeAuthCodeInput) (*oidc.TokenSet, error) {
	ret := _m.Called(ctx, in)

	var r0 *oidc.TokenSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ExchangeAuthCodeInput) (*oidc.TokenSet, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ExchangeAuthCodeInput) *oidc.TokenSet); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.TokenSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ExchangeAuthCodeInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeDeviceCode provides a mock function with given fields: ctx, authResponse
func (_m *Interface) ExchangeDeviceCode(ctx context.Context, authResponse *oauth2dev.AuthorizationResponse) (*oidc.TokenSet, error) {
	ret := _m.Called(ctx, authResponse)

	var r0 *oidc.TokenSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *oauth2dev.AuthorizationResponse) (*oidc.TokenSet, error)); ok {
		return rf(ctx, authResponse)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *oauth2dev.AuthorizationResponse) *oidc.TokenSet); ok {
		r0 = rf(ctx, authResponse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.TokenSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *oauth2dev.AuthorizationResponse) error); ok {
		r1 = rf(ctx, authResponse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthCodeURL provides a mock function with given fields: in
func (_m *Interface) GetAuthCodeURL(in client.AuthCodeURLInput) string {
	ret := _m.Called(in)

	var r0 string
	if rf, ok := ret.Get(0).(func(client.AuthCodeURLInput) string); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetClient provides a mock function with given fields: ctx
func (_m *Interface) GetClient(ctx context.Context) *http.Client {
	ret := _m.Called(ctx)

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func(context.Context) *http.Client); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

// GetDeviceAuthorization provides a mock function with given fields: ctx
func (_m *Interface) GetDeviceAuthorization(ctx context.Context) (*oauth2dev.AuthorizationResponse, error) {
	ret := _m.Called(ctx)

	var r0 *oauth2dev.AuthorizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*oauth2dev.AuthorizationResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *oauth2dev.AuthorizationResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2dev.AuthorizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenByAuthCode provides a mock function with given fields: ctx, in, localServerReadyChan
func (_m *Interface) GetTokenByAuthCode(ctx context.Context, in client.GetTokenByAuthCodeInput, localServerReadyChan chan<- string) (*oidc.TokenSet, error) {
	ret := _m.Called(ctx, in, localServerReadyChan)

	var r0 *oidc.TokenSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GetTokenByAuthCodeInput, chan<- string) (*oidc.TokenSet, error)); ok {
		return rf(ctx, in, localServerReadyChan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GetTokenByAuthCodeInput, chan<- string) *oidc.TokenSet); ok {
		r0 = rf(ctx, in, localServerReadyChan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.TokenSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GetTokenByAuthCodeInput, chan<- string) error); ok {
		r1 = rf(ctx, in, localServerReadyChan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenByROPC provides a mock function with given fields: ctx, username, password
func (_m *Interface) GetTokenByROPC(ctx context.Context, username string, password string) (*oidc.TokenSet, error) {
	ret := _m.Called(ctx, username, password)

	var r0 *oidc.TokenSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*oidc.TokenSet, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *oidc.TokenSet); ok {
		r0 = rf(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.TokenSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: ctx, refreshToken
func (_m *Interface) Refresh(ctx context.Context, refreshToken string) (*oidc.TokenSet, error) {
	ret := _m.Called(ctx, refreshToken)

	var r0 *oidc.TokenSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*oidc.TokenSet, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *oidc.TokenSet); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.TokenSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SupportedPKCEMethods provides a mock function with given fields:
func (_m *Interface) SupportedPKCEMethods() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
